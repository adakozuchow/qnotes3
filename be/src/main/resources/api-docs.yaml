openapi: 3.0.0
info:
  title: Qnotes3 API
  version: '1.0.0'
  description: Simple note-taking application with priority management

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"

    RegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123"

    AuthResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    Note:
      type: object
      required:
        - title
        - content
        - priority
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        content:
          type: string
        priority:
          type: string
          enum: [NOW, LATER, SOMEDAY, DONE]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
          nullable: true

    NoteRequest:
      type: object
      required:
        - title
        - content
        - priority
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
        priority:
          type: string
          enum: [NOW, LATER, SOMEDAY, DONE]

    NotesResponse:
      type: object
      required:
        - notes
        - totalPages
        - currentPage
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        totalPages:
          type: integer
          minimum: 1
        currentPage:
          type: integer
          minimum: 0

    Statistics:
      type: object
      required:
        - staleNotesCount
        - highPriorityNotesCount
        - averageCompletionTimeHours
        - averageDeletionTimeHours
      properties:
        staleNotesCount:
          type: integer
          description: Number of notes not updated in more than 2 days
        highPriorityNotesCount:
          type: integer
          description: Number of NOW priority notes
        averageCompletionTimeHours:
          type: number
          format: float
          description: Average time to mark note as DONE
        averageDeletionTimeHours:
          type: number
          format: float
          description: Average time to deletion

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/notes:
    get:
      tags:
        - Notes
      summary: Get paginated notes with optional filters
      operationId: getNotes
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: priority
          in: query
          required: false
          schema:
            type: string
            enum: [NOW, LATER, SOMEDAY, DONE]
        - name: dateRange
          in: query
          required: false
          schema:
            type: string
            enum: [TODAY, PAST_SEVEN_DAYS, ALL]
            default: ALL
      responses:
        '200':
          description: List of notes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Notes
      summary: Create new note
      operationId: createNote
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '201':
          description: Note created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/notes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Notes
      summary: Get note by ID
      operationId: getNoteById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Note found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Notes
      summary: Update note
      operationId: updateNote
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '200':
          description: Note updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Notes
      summary: Soft delete note
      operationId: deleteNote
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Note deleted
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/notes/statistics:
    get:
      tags:
        - Statistics
      summary: Get notes statistics
      operationId: getStatistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'